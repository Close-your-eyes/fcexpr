% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_gates_default.R
\name{plot_gates}
\alias{plot_gates}
\title{Plot a default layout of gated populations of a set of FCS files (e.g. from one experiment)}
\usage{
plot_gates(
  gs,
  gates_df,
  facetting = NULL,
  plot_gates = T,
  plot_gate_names = T,
  plot_gate_pct = T,
  inverse_trans = F,
  geom = c("hex", "pointdensity", "scattermore"),
  gate_color = "black",
  gate_stats_color = "black",
  pct_digits = 1,
  plot_contours = F,
  col_pal = RColorBrewer::brewer.pal(11, "Spectral"),
  col_pal_trans = "pseudo_log",
  theme = ggplot2::theme_bw(),
  ...
)
}
\arguments{
\item{gs}{a gatingset, e.g. made with fcexpr::wsp_get_gs}

\item{gates_df}{a data frame with informaion of how to plot gates, made with fcexpr::gs_get_gates}

\item{facetting}{which facetting (ggplot2) to apply, facet_wrap or facet_grid with respective arguments, check flowCore::pData(gs) for valid columns;
facet_null will completely remove facets; by default facetting is done across fcs each individual fcs file}

\item{plot_gates}{logical whether to plot gates}

\item{plot_gate_names}{logical whether to plot gate names}

\item{plot_gate_pct}{logical whether to plot gate percentages (fraction of parent)}

\item{inverse_trans}{logical wheter to inverse transform axes numbers; if TRUE this will make axes look like in flowjo}

\item{geom}{how to plot data; recommendation is hex; hex = geom_hex taking the binwidths column of gates_df into account, pointdensity = ggpointdensity::geom_pointdensity (see ...
and optionally provide max_nrow_to_plot (passed to ggcyto::ggcyto) to limit the number of dots per plot, defaults to 2000; be careful may increase time for plotting a lot),
scattermore = scattermore::geom_scattermore which is a high performance dot plot version for quickly plotting millions of points (only black-white currently)}

\item{gate_color}{line color of gates}

\item{gate_stats_color}{font color of gate statistics}

\item{pct_digits}{how many digits after comma to print; passed to 'digits' of ggcyto::geom_stats}

\item{plot_contours}{logical whether to plot contour lines on top with ggplot2::geom_density_2d}

\item{col_pal}{color pallette to use for color gradient generation}

\item{col_pal_trans}{argument passed as 'trans' in scale_fill_gradientn}
}
\value{
a list of ggplot2 objects, one for every gating level; each list index contains respective plots for every fcs file
}
\description{
Getting an overview of the results of a flow cytometry experiment can be a generic task if gating and analysis strategy is fixed.
Here, ggcyto is used to create an arrangement of pseudocolor plots. A number of default settings has been selected which may garuantee
good looking plots for most cases. Upon problems, the function may be improved to handle edge cases. Currently, customization is limited to a few rather technical
aspects of the plots. This may be subject to expansion but generally the range of customization is too large to fit it into a generic function with a finite number of arguments.
Hence, for very specific and detailed requriements manual plotting and fiddling is unavoidable. For that, the code of this function may serve as
a template.
}
\examples{
\dontrun{
## read gatingset
gs <- fcexpr::wsp_get_gs(wsp = ws, groups = "Group1")

## write meta data to pData of gs; sd is sampledescripion
p.df <-
flowCore::pData(gs) \%>\%
tibble::rownames_to_column("FileName") \%>\%
dplyr::left_join(sd) \%>\%
tibble::column_to_rownames("FileName")
p.df$FileName <- rownames(p.df)
flowCore::pData(gs) <- p.df

## get the gates_df, optionally select relevant gates, and modify
gates <- fcexpr::gs_get_gates(gs, n_bins = 100^2)
gates <- gates[which(gates$Population \%in\% c("CD8+", "CD8-")),]
gates$facet_strip <- T

## selected gates; to order facetted plot the inline factor level
## ordering is required as flowCore::pData(gs) cannot contain factors
## axis.text = element_blank() is part of ... and will omit axis numbers (passed to ggplot2::theme)
plotlist <-
fcexpr::plot_gates(gs = gs,
gates_df = gates,
facetting = facet_grid(cols = vars(factor(diluton_factor, levels = c(unique(p.df$diluton_factor)))), rows = vars(CD8_biotin_batch)),
axis.text = element_blank())

## paste plots together with patchwork and save
## patchwork is superior to cowplot as is will completely ignore ommitted facet_strips
ggsave(patchwork::wrap_plots(plotlist, ncol = 1), filename = paste0("facsplots.png"), device = "png", path = im_path, dpi = "retina", width = 18, height = 7)
}
}
