% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gs_get_gates.R
\name{gs_get_gates}
\alias{gs_get_gates}
\title{Gates from gatingset for plotting with ggcyto}
\usage{
gs_get_gates(
  gs,
  bins = 200,
  low.lim = 0,
  up.lim = 300,
  up.lim.scatter = 250000,
  gate.pct.stat.x.pos = 0.8,
  gate.pct.stat.y.pos = 0.2,
  gate.pct.stat.size = 4
)
}
\arguments{
\item{gs}{gatingset}

\item{bins}{number of bins for plotting}

\item{low.lim}{lower range limit}

\item{up.lim}{upper range limit}

\item{up.lim.scatter}{upper range limit for scatter channels}

\item{gate.pct.stat.x.pos}{x-position of percent labels for gates}

\item{gate.pct.stat.y.pos}{y-position of percent labels for gates}

\item{gate.pct.stat.size}{size of percent labels for gates}
}
\value{
a data frame to loop over and produce plots with ggcyto
}
\description{
Gates from gatingset for plotting with ggcyto
}
\examples{
\dontrun{
gates <- gs_get_gates(gs = my_gs)

out <- purrr::flatten(lapply(unique(gates$gate.level), function (z) {
g <- gates[which(gates[,"gate.level"] == z),]
# split into groups of equal gate.level, subset, xy-plane
g <- split(g, paste(g$gate.level, g$subset, g$x, g$y, sep = "__"))
p <- lapply(g, function(gg) {
 my.filter <- if (gg[1,"marginalFilter"]) {marginalFilter} else {NULL}
 p <- ggcyto(gs, subset = gg[1,"subset"], filter = my.filter, aes(!!sym(gg[1,"x"]), !!sym(gg[1,"y"])), max_nrow_to_plot = 5e4) +
   geom_hex(bins = gg[1,"bins"]) +
   theme_bw() +
   xlab(gg[1,"x.lab"]) +
   ylab(gg[1,"y.lab"]) +
   ggcyto_par_set(limits = list(x = c(gg[1,"x.low.lim"], gg[1,"x.up.lim"]), y = c(gg[1,"y.low.lim"], gg[1,"y.up.lim"]))) +
   scale_fill_gradientn(colours = scexpr::col_pal("spectral"), trans = "pseudo_log") +
   theme(legend.position = "none", strip.background = element_rect(fill = "white"), text = element_text(family = "Courier"), panel.grid = element_blank(), axis.text = element_blank()) +
   facet_grid(cols = vars(Patient, TCR), rows = vars(stimulus)) # order inline: facet_grid(cols = vars(PBMC.donor.short, factor(IL15.pre.stim.conc.ug.ml, levels=c("0", "0.12", "0.37", "1.11", "3.33", "10"))), rows = vars(RPTECs, RPTEC.IFNg.pre.stim))
 for (i in 1:nrow(gg)) {
   p <-
     p +
     geom_gate(gg[i,"gate.path.full"], colour = "black")
   #geom_stats(gg[i,"gate.path.full"], type = "percent", size = gg[i,"gate.pct.stat.size"], color = "black", digits = 1, adjust = c(gg[i,"gate.pct.stat.x.pos"], gg[i,"gate.pct.stat.y.pos"]), fill = alpha(c("white"),0.5))
 }
 return(p)
})
return(p)
}))


}
}
